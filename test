X_test = pd.DataFrame()

# Mean features
X_test['x_acc_mean'] = test_df['x_acc'].apply(lambda x: x.mean())
X_test['y_acc_mean'] = test_df['y_acc'].apply(lambda x: x.mean())
X_test['z_acc_mean'] = test_df['z_acc'].apply(lambda x: x.mean())
X_test['x_giro_mean'] = test_df['x_giro'].apply(lambda x: x.mean())
X_test['y_giro_mean'] = test_df['y_giro'].apply(lambda x: x.mean())
X_test['z_giro_mean'] = test_df['z_giro'].apply(lambda x: x.mean())

# Standard deviation features
X_test['x_acc_std'] = test_df['x_acc'].apply(lambda x: x.std())
X_test['y_acc_std'] = test_df['y_acc'].apply(lambda x: x.std())
X_test['z_acc_std'] = test_df['z_acc'].apply(lambda x: x.std())
X_test['x_giro_std'] = test_df['x_giro'].apply(lambda x: x.std())
X_test['y_giro_std'] = test_df['y_giro'].apply(lambda x: x.std())
X_test['z_giro_std'] = test_df['z_giro'].apply(lambda x: x.std())

# Average absolute difference features
X_test['x_acc_aad'] = test_df['x_acc'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))
X_test['y_acc_aad'] = test_df['y_acc'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))
X_test['z_acc_aad'] = test_df['z_acc'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))
X_test['x_giro_aad'] = test_df['x_giro'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))
X_test['y_giro_aad'] = test_df['y_giro'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))
X_test['z_giro_aad'] = test_df['z_giro'].apply(
    lambda x: np.mean(np.abs(np.diff(x))))

# Min features
X_test['x_acc_min'] = test_df['x_acc'].apply(lambda x: x.min())
X_test['y_acc_min'] = test_df['y_acc'].apply(lambda x: x.min())
X_test['z_acc_min'] = test_df['z_acc'].apply(lambda x: x.min())
X_test['x_giro_min'] = test_df['x_giro'].apply(lambda x: x.min())
X_test['y_giro_min'] = test_df['y_giro'].apply(lambda x: x.min())
X_test['z_giro_min'] = test_df['z_giro'].apply(lambda x: x.min())

# Max features
X_test['x_acc_max'] = test_df['x_acc'].apply(lambda x: x.max())
X_test['y_acc_max'] = test_df['y_acc'].apply(lambda x: x.max())
X_test['z_acc_max'] = test_df['z_acc'].apply(lambda x: x.max())
X_test['x_giro_max'] = test_df['x_giro'].apply(lambda x: x.max())
X_test['y_giro_max'] = test_df['y_giro'].apply(lambda x: x.max())
X_test['z_giro_max'] = test_df['z_giro'].apply(lambda x: x.max())

# Max-min features
X_test['x_acc_max-min'] = X_test['x_acc_max'] - X_test['x_acc_min']
X_test['y_acc_max-min'] = X_test['y_acc_max'] - X_test['y_acc_min']
X_test['z_acc_max-min'] = X_test['z_acc_max'] - X_test['z_acc_min']
X_test['x_giro_max-min'] = X_test['x_giro_max'] - X_test['x_giro_min']
X_test['y_giro_max-min'] = X_test['y_giro_max'] - X_test['y_giro_min']
X_test['z_giro_max-min'] = X_test['z_giro_max'] - X_test['z_giro_min']

# Median features
X_test['x_acc_median'] = test_df['x_acc'].apply(lambda x: x.median())
X_test['y_acc_median'] = test_df['y_acc'].apply(lambda x: x.median())
X_test['z_acc_median'] = test_df['z_acc'].apply(lambda x: x.median())
X_test['x_giro_median'] = test_df['x_giro'].apply(lambda x: x.median())
X_test['y_giro_median'] = test_df['y_giro'].apply(lambda x: x.median())
X_test['z_giro_median'] = test_df['z_giro'].apply(lambda x: x.median())

# Median absolute deviation features
X_test['x_acc_mad'] = test_df['x_acc'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['y_acc_mad'] = test_df['y_acc'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['z_acc_mad'] = test_df['z_acc'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['x_giro_mad'] = test_df['x_giro'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['y_giro_mad'] = test_df['y_giro'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['z_giro_mad'] = test_df['z_giro'].apply(
    lambda x: np.median(np.absolute(x - np.median(x))))

# Interquartile range features
X_test['x_acc_iqr'] = test_df['x_acc'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['y_acc_iqr'] = test_df['y_acc'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['z_acc_iqr'] = test_df['z_acc'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['x_giro_iqr'] = test_df['x_giro'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['y_giro_iqr'] = test_df['y_giro'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['z_giro_iqr'] = test_df['z_giro'].apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))

# Negative features
X_test['x_acc_neg'] = test_df['x_acc'].apply(lambda x: np.sum(x < 0))
X_test['y_acc_neg'] = test_df['y_acc'].apply(lambda x: np.sum(x < 0))
X_test['z_acc_neg'] = test_df['z_acc'].apply(lambda x: np.sum(x < 0))
X_test['x_giro_neg'] = test_df['x_giro'].apply(lambda x: np.sum(x < 0))
X_test['y_giro_neg'] = test_df['y_giro'].apply(lambda x: np.sum(x < 0))
X_test['z_giro_neg'] = test_df['z_giro'].apply(lambda x: np.sum(x < 0))

# Positive features
X_test['x_acc_pos'] = test_df['x_acc'].apply(lambda x: np.sum(x > 0))
X_test['y_acc_pos'] = test_df['y_acc'].apply(lambda x: np.sum(x > 0))
X_test['z_acc_pos'] = test_df['z_acc'].apply(lambda x: np.sum(x > 0))
X_test['x_giro_pos'] = test_df['x_giro'].apply(lambda x: np.sum(x > 0))
X_test['y_giro_pos'] = test_df['y_giro'].apply(lambda x: np.sum(x > 0))
X_test['z_giro_pos'] = test_df['z_giro'].apply(lambda x: np.sum(x > 0))

# Values above mean features
X_test['x_acc_above_mean'] = test_df['x_acc'].apply(
    lambda x: np.sum(x > x.mean()))
X_test['y_acc_above_mean'] = test_df['y_acc'].apply(
    lambda x: np.sum(x > x.mean()))
X_test['z_acc_above_mean'] = test_df['z_acc'].apply(
    lambda x: np.sum(x > x.mean()))
X_test['x_giro_above_mean'] = test_df['x_giro'].apply(
    lambda x: np.sum(x > x.mean()))
X_test['y_giro_above_mean'] = test_df['y_giro'].apply(
    lambda x: np.sum(x > x.mean()))
X_test['z_giro_above_mean'] = test_df['z_giro'].apply(
    lambda x: np.sum(x > x.mean()))

# Number of peaks features
X_test['x_acc_peaks'] = test_df['x_acc'].apply(lambda x: len(find_peaks(x)[0]))
X_test['y_acc_peaks'] = test_df['y_acc'].apply(lambda x: len(find_peaks(x)[0]))
X_test['z_acc_peaks'] = test_df['z_acc'].apply(lambda x: len(find_peaks(x)[0]))
X_test['x_giro_peaks'] = test_df['x_giro'].apply(
    lambda x: len(find_peaks(x)[0]))
X_test['y_giro_peaks'] = test_df['y_giro'].apply(
    lambda x: len(find_peaks(x)[0]))
X_test['z_giro_peaks'] = test_df['z_giro'].apply(
    lambda x: len(find_peaks(x)[0]))

# Skewnness features
X_test['x_acc_skew'] = test_df['x_acc'].apply(lambda x: stats.skew(x))
X_test['y_acc_skew'] = test_df['y_acc'].apply(lambda x: stats.skew(x))
X_test['z_acc_skew'] = test_df['z_acc'].apply(lambda x: stats.skew(x))
X_test['x_giro_skew'] = test_df['x_giro'].apply(lambda x: stats.skew(x))
X_test['y_giro_skew'] = test_df['y_giro'].apply(lambda x: stats.skew(x))
X_test['z_giro_skew'] = test_df['z_giro'].apply(lambda x: stats.skew(x))

# Kurtosis features
X_test['x_acc_kurt'] = test_df['x_acc'].apply(lambda x: stats.kurtosis(x))
X_test['y_acc_kurt'] = test_df['y_acc'].apply(lambda x: stats.kurtosis(x))
X_test['z_acc_kurt'] = test_df['z_acc'].apply(lambda x: stats.kurtosis(x))
X_test['x_giro_kurt'] = test_df['x_giro'].apply(lambda x: stats.kurtosis(x))
X_test['y_giro_kurt'] = test_df['y_giro'].apply(lambda x: stats.kurtosis(x))
X_test['z_giro_kurt'] = test_df['z_giro'].apply(lambda x: stats.kurtosis(x))

# Energy features
X_test['x_acc_energy'] = test_df['x_acc'].apply(lambda x: np.sum(x**2)/100)
X_test['y_acc_energy'] = test_df['y_acc'].apply(lambda x: np.sum(x**2)/100)
X_test['z_acc_energy'] = test_df['z_acc'].apply(lambda x: np.sum(x**2)/100)
X_test['x_giro_energy'] = test_df['x_giro'].apply(lambda x: np.sum(x**2)/100)
X_test['y_giro_energy'] = test_df['y_giro'].apply(lambda x: np.sum(x**2)/100)
X_test['z_giro_energy'] = test_df['z_giro'].apply(lambda x: np.sum(x**2)/100)

# Average
X_test['avg_result_acc'] = [i.mean() for i in (
    (test_df['x_acc']**2 + test_df['y_acc']**2 + test_df['z_acc']**2)**0.5)]

X_test['avg_result_giro'] = [i.mean() for i in (
    (test_df['x_giro']**2 + test_df['y_giro']**2 + test_df['z_giro']**2)**0.5)]

# Signal magnitude area features acc
X_test['acc_sma'] = test_df['x_acc'].apply(lambda x: np.sum(abs(x)/100)) + test_df['y_acc'].apply(lambda x: np.sum(abs(x)/100)) \
    + test_df['z_acc'].apply(lambda x: np.sum(abs(x)/100))

# Signal magnitude area features giro
X_test['giro_sma'] = test_df['x_giro'].apply(lambda x: np.sum(abs(x)/100)) + test_df['y_giro'].apply(lambda x: np.sum(abs(x)/100)) \
    + test_df['z_giro'].apply(lambda x: np.sum(abs(x)/100))


# Add FFT features to the dataframe
x_acc_fft = test_df['x_acc'].apply(lambda x: np.abs(np.fft.fft(x)))
y_acc_fft = test_df['y_acc'].apply(lambda x: np.abs(np.fft.fft(x)))
z_acc_fft = test_df['z_acc'].apply(lambda x: np.abs(np.fft.fft(x)))
x_giro_fft = test_df['x_giro'].apply(lambda x: np.abs(np.fft.fft(x)))
y_giro_fft = test_df['y_giro'].apply(lambda x: np.abs(np.fft.fft(x)))
z_giro_fft = test_df['z_giro'].apply(lambda x: np.abs(np.fft.fft(x)))

# FFT mean features
X_test['x_acc_fft_mean'] = x_acc_fft.apply(lambda x: np.abs(x).mean())
X_test['y_acc_fft_mean'] = y_acc_fft.apply(lambda x: np.abs(x).mean())
X_test['z_acc_fft_mean'] = z_acc_fft.apply(lambda x: np.abs(x).mean())
X_test['x_giro_fft_mean'] = x_giro_fft.apply(lambda x: np.abs(x).mean())
X_test['y_giro_fft_mean'] = y_giro_fft.apply(lambda x: np.abs(x).mean())
X_test['z_giro_fft_mean'] = z_giro_fft.apply(lambda x: np.abs(x).mean())

# FFT std features
X_test['x_acc_fft_std'] = x_acc_fft.apply(lambda x: x.std())
X_test['y_acc_fft_std'] = y_acc_fft.apply(lambda x: x.std())
X_test['z_acc_fft_std'] = z_acc_fft.apply(lambda x: x.std())
X_test['x_giro_fft_std'] = x_giro_fft.apply(lambda x: x.std())
X_test['y_giro_fft_std'] = y_giro_fft.apply(lambda x: x.std())
X_test['z_giro_fft_std'] = z_giro_fft.apply(lambda x: x.std())

# FFT absolute difference features
X_test['x_acc_fft_abs_diff'] = x_acc_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))
X_test['y_acc_fft_abs_diff'] = y_acc_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))
X_test['z_acc_fft_abs_diff'] = z_acc_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))
X_test['x_giro_fft_abs_diff'] = x_giro_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))
X_test['y_giro_fft_abs_diff'] = y_giro_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))
X_test['z_giro_fft_abs_diff'] = z_giro_fft.apply(
    lambda x: np.mean(np.absolute(x - np.mean(x))))

# FFT min features
X_test['x_acc_fft_min'] = x_acc_fft.apply(lambda x: x.min())
X_test['y_acc_fft_min'] = y_acc_fft.apply(lambda x: x.min())
X_test['z_acc_fft_min'] = z_acc_fft.apply(lambda x: x.min())
X_test['x_giro_fft_min'] = x_giro_fft.apply(lambda x: x.min())
X_test['y_giro_fft_min'] = y_giro_fft.apply(lambda x: x.min())
X_test['z_giro_fft_min'] = z_giro_fft.apply(lambda x: x.min())

# FFT max features
X_test['x_acc_fft_max'] = x_acc_fft.apply(lambda x: x.max())
X_test['y_acc_fft_max'] = y_acc_fft.apply(lambda x: x.max())
X_test['z_acc_fft_max'] = z_acc_fft.apply(lambda x: x.max())
X_test['x_giro_fft_max'] = x_giro_fft.apply(lambda x: x.max())
X_test['y_giro_fft_max'] = y_giro_fft.apply(lambda x: x.max())
X_test['z_giro_fft_max'] = z_giro_fft.apply(lambda x: x.max())

# FFT max-min features
X_test['x_acc_fft_max_min'] = X_test['x_acc_fft_max'] - X_test['x_acc_fft_min']
X_test['y_acc_fft_max_min'] = X_test['y_acc_fft_max'] - X_test['y_acc_fft_min']
X_test['z_acc_fft_max_min'] = X_test['z_acc_fft_max'] - X_test['z_acc_fft_min']
X_test['x_giro_fft_max_min'] = X_test['x_giro_fft_max'] - \
    X_test['x_giro_fft_min']
X_test['y_giro_fft_max_min'] = X_test['y_giro_fft_max'] - \
    X_test['y_giro_fft_min']
X_test['z_giro_fft_max_min'] = X_test['z_giro_fft_max'] - \
    X_test['z_giro_fft_min']

# FFT median features
X_test['x_acc_fft_median'] = x_acc_fft.apply(lambda x: np.median(x))
X_test['y_acc_fft_median'] = y_acc_fft.apply(lambda x: np.median(x))
X_test['z_acc_fft_median'] = z_acc_fft.apply(lambda x: np.median(x))
X_test['x_giro_fft_median'] = x_giro_fft.apply(lambda x: np.median(x))
X_test['y_giro_fft_median'] = y_giro_fft.apply(lambda x: np.median(x))
X_test['z_giro_fft_median'] = z_giro_fft.apply(lambda x: np.median(x))

# FFT median abs deviation features
X_test['x_acc_fft_median_abs_dev'] = x_acc_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['y_acc_fft_median_abs_dev'] = y_acc_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['z_acc_fft_median_abs_dev'] = z_acc_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['x_giro_fft_median_abs_dev'] = x_giro_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['y_giro_fft_median_abs_dev'] = y_giro_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))
X_test['z_giro_fft_median_abs_dev'] = z_giro_fft.apply(
    lambda x: np.median(np.absolute(x - np.median(x))))

# FFT interquartile range features
X_test['x_acc_fft_iqr'] = x_acc_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['y_acc_fft_iqr'] = y_acc_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['z_acc_fft_iqr'] = z_acc_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['x_giro_fft_iqr'] = x_giro_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['y_giro_fft_iqr'] = y_giro_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))
X_test['z_giro_fft_iqr'] = z_giro_fft.apply(
    lambda x: np.subtract(*np.percentile(x, [75, 25])))

# FFT values above mean features
X_test['x_acc_fft_above_mean'] = x_acc_fft.apply(
    lambda x: np.sum(x > x.mean()))
X_test['y_acc_fft_above_mean'] = y_acc_fft.apply(
    lambda x: np.sum(x > x.mean()))
X_test['z_acc_fft_above_mean'] = z_acc_fft.apply(
    lambda x: np.sum(x > x.mean()))
X_test['x_giro_fft_above_mean'] = x_giro_fft.apply(
    lambda x: np.sum(x > x.mean()))
X_test['y_giro_fft_above_mean'] = y_giro_fft.apply(
    lambda x: np.sum(x > x.mean()))
X_test['z_giro_fft_above_mean'] = z_giro_fft.apply(
    lambda x: np.sum(x > x.mean()))

# FFT peaks features
X_test['x_acc_fft_peaks'] = x_acc_fft.apply(lambda x: len(find_peaks(x)[0]))
X_test['y_acc_fft_peaks'] = y_acc_fft.apply(lambda x: len(find_peaks(x)[0]))
X_test['z_acc_fft_peaks'] = z_acc_fft.apply(lambda x: len(find_peaks(x)[0]))
X_test['x_giro_fft_peaks'] = x_giro_fft.apply(lambda x: len(find_peaks(x)[0]))
X_test['y_giro_fft_peaks'] = y_giro_fft.apply(lambda x: len(find_peaks(x)[0]))
X_test['z_giro_fft_peaks'] = z_giro_fft.apply(lambda x: len(find_peaks(x)[0]))

# FFT skewness features
X_test['x_acc_fft_skew'] = x_acc_fft.apply(lambda x: stats.skew(x))
X_test['y_acc_fft_skew'] = y_acc_fft.apply(lambda x: stats.skew(x))
X_test['z_acc_fft_skew'] = z_acc_fft.apply(lambda x: stats.skew(x))
X_test['x_giro_fft_skew'] = x_giro_fft.apply(lambda x: stats.skew(x))
X_test['y_giro_fft_skew'] = y_giro_fft.apply(lambda x: stats.skew(x))
X_test['z_giro_fft_skew'] = z_giro_fft.apply(lambda x: stats.skew(x))

# FFT kurtosis features
X_test['x_acc_fft_kurtosis'] = x_acc_fft.apply(lambda x: stats.kurtosis(x))
X_test['y_acc_fft_kurtosis'] = y_acc_fft.apply(lambda x: stats.kurtosis(x))
X_test['z_acc_fft_kurtosis'] = z_acc_fft.apply(lambda x: stats.kurtosis(x))
X_test['x_giro_fft_kurtosis'] = x_giro_fft.apply(lambda x: stats.kurtosis(x))
X_test['y_giro_fft_kurtosis'] = y_giro_fft.apply(lambda x: stats.kurtosis(x))
X_test['z_giro_fft_kurtosis'] = z_giro_fft.apply(lambda x: stats.kurtosis(x))

# FFT energy features
X_test['x_acc_fft_energy'] = x_acc_fft.apply(lambda x: np.sum(x**2)/50)
X_test['y_acc_fft_energy'] = y_acc_fft.apply(lambda x: np.sum(x**2)/50)
X_test['z_acc_fft_energy'] = z_acc_fft.apply(lambda x: np.sum(x**2)/50)
X_test['x_giro_fft_energy'] = x_giro_fft.apply(lambda x: np.sum(x**2)/50)
X_test['y_giro_fft_energy'] = y_giro_fft.apply(lambda x: np.sum(x**2)/50)
X_test['z_giro_fft_energy'] = z_giro_fft.apply(lambda x: np.sum(x**2)/50)

# FFT average acceleration features
X_test['avg_result_fft_acc'] = [i.mean() for i in (
    (x_acc_fft**2 + y_acc_fft**2 + z_acc_fft**2)**0.5)]
X_test['avg_result_fft_giro'] = [i.mean() for i in (
    (x_giro_fft**2 + y_giro_fft**2 + z_giro_fft**2)**0.5)]

# FFT
X_test['acc_sma_fft'] = x_acc_fft.apply(lambda x: np.sum(abs(x)/100)) + y_acc_fft.apply(lambda x: np.sum(abs(x)/100)) \
    + z_acc_fft.apply(lambda x: np.sum(abs(x)/100))
X_test['giro_sma_fft'] = x_giro_fft.apply(lambda x: np.sum(abs(x)/100)) + y_giro_fft.apply(lambda x: np.sum(abs(x)/100)) \
    + z_giro_fft.apply(lambda x: np.sum(abs(x)/100))

# Index of max value in time domain feature
X_test['x_acc_argmax'] = test_df['x_acc'].apply(lambda x: np.argmax(x))
X_test['y_acc_argmax'] = test_df['y_acc'].apply(lambda x: np.argmax(x))
X_test['z_acc_argmax'] = test_df['z_acc'].apply(lambda x: np.argmax(x))
X_test['x_giro_argmax'] = test_df['x_giro'].apply(lambda x: np.argmax(x))
X_test['y_giro_argmax'] = test_df['y_giro'].apply(lambda x: np.argmax(x))
X_test['z_giro_argmax'] = test_df['z_giro'].apply(lambda x: np.argmax(x))

# Index of min value in time domain feature
X_test['x_acc_argmin'] = test_df['x_acc'].apply(lambda x: np.argmin(x))
X_test['y_acc_argmin'] = test_df['y_acc'].apply(lambda x: np.argmin(x))
X_test['z_acc_argmin'] = test_df['z_acc'].apply(lambda x: np.argmin(x))
X_test['x_giro_argmin'] = test_df['x_giro'].apply(lambda x: np.argmin(x))
X_test['y_giro_argmin'] = test_df['y_giro'].apply(lambda x: np.argmin(x))
X_test['z_giro_argmin'] = test_df['z_giro'].apply(lambda x: np.argmin(x))

# Difference between max and min value in time domain feature
X_test['x_acc_diff'] = abs(X_test['x_acc_argmax'] - X_test['x_acc_argmin'])
X_test['y_acc_diff'] = abs(X_test['y_acc_argmax'] - X_test['y_acc_argmin'])
X_test['z_acc_diff'] = abs(X_test['z_acc_argmax'] - X_test['z_acc_argmin'])
X_test['x_giro_diff'] = abs(X_test['x_giro_argmax'] - X_test['x_giro_argmin'])
X_test['y_giro_diff'] = abs(X_test['y_giro_argmax'] - X_test['y_giro_argmin'])
X_test['z_giro_diff'] = abs(X_test['z_giro_argmax'] - X_test['z_giro_argmin'])

# FFT Index of max value in time domain feature
X_test['x_acc_fft_argmax'] = x_acc_fft.apply(lambda x: np.argmax(x))
X_test['y_acc_fft_argmax'] = y_acc_fft.apply(lambda x: np.argmax(x))
X_test['z_acc_fft_argmax'] = z_acc_fft.apply(lambda x: np.argmax(x))
X_test['x_giro_fft_argmax'] = x_giro_fft.apply(lambda x: np.argmax(x))
X_test['y_giro_fft_argmax'] = y_giro_fft.apply(lambda x: np.argmax(x))
X_test['z_giro_fft_argmax'] = z_giro_fft.apply(lambda x: np.argmax(x))

# FFT Index of min value in time domain feature
X_test['x_acc_fft_argmin'] = x_acc_fft.apply(lambda x: np.argmin(x))
X_test['y_acc_fft_argmin'] = y_acc_fft.apply(lambda x: np.argmin(x))
X_test['z_acc_fft_argmin'] = z_acc_fft.apply(lambda x: np.argmin(x))
X_test['x_giro_fft_argmin'] = x_giro_fft.apply(lambda x: np.argmin(x))
X_test['y_giro_fft_argmin'] = y_giro_fft.apply(lambda x: np.argmin(x))
X_test['z_giro_fft_argmin'] = z_giro_fft.apply(lambda x: np.argmin(x))

# FFT Difference between max and min value in time domain feature
X_test['x_acc_fft_diff'] = abs(
    X_test['x_acc_fft_argmax'] - X_test['x_acc_fft_argmin'])
X_test['y_acc_fft_diff'] = abs(
    X_test['y_acc_fft_argmax'] - X_test['y_acc_fft_argmin'])
X_test['z_acc_fft_diff'] = abs(
    X_test['z_acc_fft_argmax'] - X_test['z_acc_fft_argmin'])
X_test['x_giro_fft_diff'] = abs(
    X_test['x_giro_fft_argmax'] - X_test['x_giro_fft_argmin'])
X_test['y_giro_fft_diff'] = abs(
    X_test['y_giro_fft_argmax'] - X_test['y_giro_fft_argmin'])
X_test['z_giro_fft_diff'] = abs(
    X_test['z_giro_fft_argmax'] - X_test['z_giro_fft_argmin'])

X_test.head()
